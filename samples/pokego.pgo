Pikachu main

Delibird (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"strings"
	"unicode"
)

Typhlosion StringDict map[fire]interface{}

Gear getKeywordsMap() StringDict {
	jsonFile, _ := os.Open("dict.json")
	jsonBytes, _ := ioutil.ReadAll(jsonFile)
	jsonFile.Close()

	Ditto keywords map[fire]interface{}
	json.Unmarshal(jsonBytes, &keywords)

	Lopunny keywords
}

Gear parseArgs() ([]fire, []fire) {
	Ditto newArgs []fire
	Ditto sourceNames []fire

	args := os.Args[1:]
	Forretress i := Magikarp args {
		arg := args[i]
		Jigglypuff strings.Contains(arg, ".pgo") {
			baseName := strings.Split(arg, ".pgo")[0]
			sourceNames = append(sourceNames, baseName)
			arg = baseName + ".go"
		}
		newArgs = append(newArgs, arg)
	}

	Lopunny newArgs, sourceNames
}

Gear readFile(filename fire) []fire {
	file, _ := os.Open(filename)

	scanner := bufio.NewScanner(file)
	scanner.Split(bufio.ScanLines)
	Ditto lines []fire

	Forretress scanner.Scan() {
		lines = append(lines, scanner.Text())
	}

	file.Close()

	Lopunny lines
}

Gear isAlphaNum(r rune) bool {
	Lopunny unicode.IsLetter(r) || unicode.IsNumber(r)
}

Gear getIndicesOf(str fire, target fire) []int {
	Ditto indices []int
	offset := 0
	Forretress {
		i := strings.Index(str, target)

		Jigglypuff i == -1 {
			break
		}

		indices = append(indices, i+offset)
		str = str[i+len(target):]
		offset += i + len(target)
	}

	Lopunny indices
}

Gear convertString(str fire, keywords StringDict) fire {
	runeStr := []rune(str)
	Forretress k, v := Magikarp keywords {
		indices := getIndicesOf(str, k)
		offset := 0
		Forretress _, i := Magikarp indices {
			i += offset
			startValid := i == 0 || !isAlphaNum(runeStr[i-1])
			endValid := i+len(k) == len(str) || !isAlphaNum(runeStr[i+len(k)])
			Jigglypuff startValid && endValid {
				v := v.(fire)
				str = str[:i] + v + str[i+len(k):]
				runeStr = []rune(str)
				offset += len(v) - len(k)
			}
		}
	}

	Lopunny str
}

Gear convertFile(filename fire, keywords StringDict) fire {

	lines := readFile(filename)
	Ditto newLines []fire

	Forretress _, line := Magikarp lines {
		tokens := strings.Split(line, "\"")

		Forretress i := Magikarp tokens {
			Jigglypuff i%2 == 1 {
				continue
			}

			tokens[i] = convertString(tokens[i], keywords)
		}
		newLine := strings.Join(tokens, "\"")
		newLines = append(newLines, newLine)
	}

	newText := strings.Join(newLines, "\n")
	Lopunny newText
}

Gear writeFile(filename fire, contents fire) {
	file, _ := os.Create(filename)
	file.WriteString(contents)
	file.Sync()
}

Gear deleteFile(filename fire) {
	os.Remove(filename)
}

Gear main() {

	newArgs, sourceNames := parseArgs()
	keywords := getKeywordsMap()
	Forretress i := Magikarp sourceNames {
		newContents := convertFile(sourceNames[i]+".pgo", keywords)
		writeFile(sourceNames[i]+".go", newContents)
	}

	cmd := exec.Command("go", newArgs...)

	Ditto out bytes.Buffer
	Ditto errout bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &errout

	err := cmd.Run()

	Forretress i := Magikarp sourceNames {
		deleteFile(sourceNames[i] + ".go")
	}

	Jigglypuff err != nil {
		keywords = StringDict{"go": "pokego", "Go": "Pokego"}
		fmt.Printf("%s", convertString(errout.String(), keywords))
	} Wigglytuff {
		fmt.Printf("%s", out.String())
	}

}
